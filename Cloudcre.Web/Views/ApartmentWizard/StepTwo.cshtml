@model Cloudcre.Service.ViewModels.MultipleFamilyViewModel
@using Cloudcre.Web.HtmlHelpers
@using Cloudcre.Web.Mapping

@{
    Layout = null;
}

<div id="propertyWizardTemplateContainer">
<script type="text/html" id="personTemplate">
@using (Html.BeginForm("StepTwo", "ApartmentWizard", FormMethod.Post, new { id = "dialog-form", @class = "wufoo" }))
{
    @Html.HiddenFor(model => model.serializedViewModel, new { data_bind = "value: serializedViewModel" })
    <ul class="left">
        <li class="complex">
	        <fieldset>
                <label class="desc" id="site">Site</label>
                <div>
                    <span class="left">
		                @Html.LabelFor(model => model.SiteTotalSquareFoot) @Html.ValidationMessageFor(model => model.SiteTotalSquareFoot)
                        @Html.TextBoxFor(model => model.SiteTotalSquareFoot, new { data_bind = "valueWithNullsAsEmpty: SiteTotalSquareFoot", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.FloorToAreaRatio) @Html.ValidationMessageFor(model => model.FloorToAreaRatio)
                        @Html.TextBoxFor(model => model.FloorToAreaRatio, new { data_bind = "valueWithNullsAsEmpty: FloorToAreaRatio", @readonly = "readonly", @class = "text ui-widget-content ui-corner-all readonly" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.BuildingAreaRatio) @Html.ValidationMessageFor(model => model.BuildingAreaRatio)
                        @Html.TextBoxFor(model => model.BuildingAreaRatio, new { data_bind = "valueWithNullsAsEmpty: BuildingAreaRatio", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.Zoning) @Html.ValidationMessageFor(model => model.Zoning)
                        @Html.TextBoxFor(model => model.Zoning, new { data_bind = "valueWithNullsAsEmpty: Zoning", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.Parking) @Html.ValidationMessageFor(model => model.Parking)
                        @Html.TextBoxFor(model => model.Parking, new { data_bind = "valueWithNullsAsEmpty: Parking", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.ParcelId) @Html.ValidationMessageFor(model => model.ParcelId)
                        @Html.TextBoxFor(model => model.ParcelId, new { data_bind = "valueWithNullsAsEmpty: ParcelId", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.LegalDescription) @Html.ValidationMessageFor(model => model.LegalDescription)
                        @Html.TextBoxFor(model => model.LegalDescription, new { data_bind = "valueWithNullsAsEmpty: LegalDescription", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.FloodZone) @Html.ValidationMessageFor(model => model.FloodZone)
                        @Html.TextBoxFor(model => model.FloodZone, new { data_bind = "valueWithNullsAsEmpty: FloodZone", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.CensusTract) @Html.ValidationMessageFor(model => model.CensusTract)
                        @Html.TextBoxFor(model => model.CensusTract, new { data_bind = "valueWithNullsAsEmpty: CensusTract", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                </div>
	        </fieldset>
        </li>        
        <li class="complex">
	        <fieldset>
                <label class="desc" id="building">Building</label>
                <div>
                    <span class="left">
		                @Html.LabelFor(model => model.BuildingTotalSquareFoot) @Html.ValidationMessageFor(model => model.BuildingTotalSquareFoot)
                        @Html.TextBoxFor(model => model.BuildingTotalSquareFoot, new { data_bind = "valueWithNullsAsEmpty: BuildingTotalSquareFoot", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.BuiltTimePeriod) @Html.ValidationMessageFor(model => model.BuiltTimePeriod)
                        @Html.TextBoxFor(model => model.BuiltTimePeriod, new { data_bind = "valueWithNullsAsEmpty: BuiltTimePeriod", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.Condition) @Html.ValidationMessageFor(model => model.Condition)
                        @Html.TextBoxFor(model => model.Condition, new { data_bind = "valueWithNullsAsEmpty: Condition", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.Class) @Html.ValidationMessageFor(model => model.Class)
                        @Html.TextBoxFor(model => model.Class, new { data_bind = "valueWithNullsAsEmpty: Class", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.Quality) @Html.ValidationMessageFor(model => model.Quality)
                        @Html.TextBoxFor(model => model.Quality, new { data_bind = "valueWithNullsAsEmpty: Quality", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.Stories) @Html.ValidationMessageFor(model => model.Stories)
                        @Html.TextBoxFor(model => model.Stories, new { data_bind = "valueWithNullsAsEmpty: Stories", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.Units) @Html.ValidationMessageFor(model => model.Units)
                        @Html.TextBoxFor(model => model.Units, new { data_bind = "valueWithNullsAsEmpty: Units", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.BedroomMix) @Html.ValidationMessageFor(model => model.BedroomMix)
                        @Html.TextBoxFor(model => model.BedroomMix, new { data_bind = "valueWithNullsAsEmpty: BedroomMix", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.AverageSquareFootPerUnit) @Html.ValidationMessageFor(model => model.AverageSquareFootPerUnit)
                        @Html.TextBoxFor(model => model.AverageSquareFootPerUnit, new { data_bind = "valueWithNullsAsEmpty: AverageSquareFootPerUnit", @readonly = "readonly", @class = "text ui-widget-content ui-corner-all readonly" })
                    </span>
                </div>
	        </fieldset>
        </li>
    </ul>
    <ul class="left">
        <li class="complex">
	        <fieldset>
                <label class="desc" id="sale">Sale</label>
                <div>
                    <span class="left">
		                @Html.LabelFor(model => model.MarketingPeriod) @Html.ValidationMessageFor(model => model.MarketingPeriod)
                        @Html.TextBoxFor(model => model.MarketingPeriod, new { data_bind = "valueWithNullsAsEmpty: MarketingPeriod", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.Price) @Html.ValidationMessageFor(model => model.Price)
                        @Html.TextBoxFor(model => model.Price, new { data_bind = "valueWithNullsAsEmpty: Price", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.CostPerBuildingSquareFoot) @Html.ValidationMessageFor(model => model.CostPerBuildingSquareFoot)
                        @Html.TextBoxFor(model => model.CostPerBuildingSquareFoot, new { data_bind = "valueWithNullsAsEmpty: CostPerBuildingSquareFoot", @readonly = "readonly", @class = "text ui-widget-content ui-corner-all readonly" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.CostPerUnit) @Html.ValidationMessageFor(model => model.CostPerUnit)
                        @Html.TextBoxFor(model => model.CostPerUnit, new { data_bind = "valueWithNullsAsEmpty: CostPerUnit", @readonly = "readonly", @class = "text ui-widget-content ui-corner-all readonly" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.SaleDate) @Html.ValidationMessageFor(model => model.SaleDate)
                        @Html.TextBoxFor(model => model.SaleDate, new { data_bind = "value: SaleDate", @class = "text ui-widget-content ui-corner-all date-pick" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.OfficialRecordBookAndPage) @Html.ValidationMessageFor(model => model.OfficialRecordBookAndPage)
                        @Html.TextBoxFor(model => model.OfficialRecordBookAndPage, new { data_bind = "valueWithNullsAsEmpty: OfficialRecordBookAndPage", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.Grantor) @Html.ValidationMessageFor(model => model.Grantor)
                        @Html.TextBoxFor(model => model.Grantor, new { data_bind = "valueWithNullsAsEmpty: Grantor", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.Grantee) @Html.ValidationMessageFor(model => model.Grantee)
                        @Html.TextBoxFor(model => model.Grantee, new { data_bind = "valueWithNullsAsEmpty: Grantee", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.PropertyRights) @Html.ValidationMessageFor(model => model.PropertyRights)
                        @Html.TextBoxFor(model => model.PropertyRights, new { data_bind = "valueWithNullsAsEmpty: PropertyRights", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.Financing) @Html.ValidationMessageFor(model => model.Financing)
                        @Html.TextBoxFor(model => model.Financing, new { data_bind = "valueWithNullsAsEmpty: Financing", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.ListedPriceAtSale) @Html.ValidationMessageFor(model => model.ListedPriceAtSale)
                        @Html.TextBoxFor(model => model.ListedPriceAtSale, new { data_bind = "valueWithNullsAsEmpty: ListedPriceAtSale", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.ContractPeriod) @Html.ValidationMessageFor(model => model.ContractPeriod)
                        @Html.TextBoxFor(model => model.ContractPeriod, new { data_bind = "valueWithNullsAsEmpty: ContractPeriod", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.Verification) @Html.ValidationMessageFor(model => model.Verification)
                        @Html.TextBoxFor(model => model.Verification, new { data_bind = "valueWithNullsAsEmpty: Verification", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.PriorSales) @Html.ValidationMessageFor(model => model.PriorSales)
                        @Html.TextBoxFor(model => model.PriorSales, new { data_bind = "valueWithNullsAsEmpty: PriorSales", @class = "text ui-widget-content ui-corner-all" })
                    </span> 
                </div>
	        </fieldset>
        </li>
        <li class="complex">
	        <fieldset>
                <label class="desc" id="economic">Economic</label>
                <div>
                    <span style="float:left; width:80%;">
		                @Html.LabelFor(model => model.Occupancy) @Html.ValidationMessageFor(model => model.Occupancy)
                        @Html.TextBoxFor(model => model.Occupancy, new { data_bind = "valueWithNullsAsEmpty: Occupancy", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <div class="thirds">
                    <span class="third">
		                @Html.LabelFor(model => model.PotentialGrossIncome) @Html.ValidationMessageFor(model => model.PotentialGrossIncome)
                        @Html.TextBoxFor(model => model.PotentialGrossIncome, new { data_bind = "valueWithNullsAsEmpty: PotentialGrossIncome", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="third">
		                <label>$/SF</label>
		                <input type="text" name="potentialGrossIncomePerSqFt" id="potentialGrossIncomePerSqFt" data-bind = "valueWithNullsAsEmpty: PotentialGrossIncomePerSqFt" readonly = "readonly" class="text ui-widget-content ui-corner-all readonly" />
                    </span>
                    <span class="third">
		                <label>$/Unit</label>
   		                <input type="text" name="potentialGrossIncomePerBuildingUnit" id="potentialGrossIncomePerBuildingUnit" data-bind = "valueWithNullsAsEmpty: PotentialGrossIncomePerBuildingUnit" readonly = "readonly" class="text ui-widget-content ui-corner-all readonly" />
                    </span>
                    </div>
                
                    <div class="thirds">
                    <span class="third">
		                @Html.LabelFor(model => model.EffectiveGrossIncome) @Html.ValidationMessageFor(model => model.EffectiveGrossIncome)
                        @Html.TextBoxFor(model => model.EffectiveGrossIncome, new { data_bind = "valueWithNullsAsEmpty: EffectiveGrossIncome", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="third">
		                <label>$/SF</label>
		                <input type="text" name="effectiveGrossIncomePerSqFt" id="effectiveGrossIncomePerSqFt" data-bind = "valueWithNullsAsEmpty: EffectiveGrossIncomePerSqFt" readonly = "readonly" class="text ui-widget-content ui-corner-all readonly" />
                    </span>
                    <span class="third">
		                <label>$/Unit</label>
		                <input type="text" name="effectiveGrossIncomePerBuildingUnit" id="effectiveGrossIncomePerBuildingUnit" data-bind = "valueWithNullsAsEmpty: EffectiveGrossIncomePerBuildingUnit" readonly = "readonly" class="text ui-widget-content ui-corner-all readonly" />
                    </span>
                    </div>
                
                    <div class="thirds">
                    <span class="third">
		                @Html.LabelFor(model => model.OperatingExpense) @Html.ValidationMessageFor(model => model.OperatingExpense)
                        @Html.TextBoxFor(model => model.OperatingExpense, new { data_bind = "valueWithNullsAsEmpty: OperatingExpense", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="third">
		                <label>$/SF</label>
                        <input type="text" name="operatingExpensePerSqFt" id="operatingExpensePerSqFt" data-bind = "valueWithNullsAsEmpty: OperatingExpensePerSqFt" readonly = "readonly" class="text ui-widget-content ui-corner-all readonly" />
                    </span>
                    <span class="third">
		                <label>$/Unit</label>
                        <input type="text" name="operatingExpensePerBuildingUnit" id="operatingExpensePerBuildingUnit" data-bind = "valueWithNullsAsEmpty: OperatingExpensePerBuildingUnit" readonly = "readonly" class="text ui-widget-content ui-corner-all readonly" />
                    </span>
                    </div>
                
                    <div class="thirds">
                    <span class="third">
		                @Html.LabelFor(model => model.NetOperatingIncome) @Html.ValidationMessageFor(model => model.NetOperatingIncome)
                        @Html.TextBoxFor(model => model.NetOperatingIncome, new { data_bind = "valueWithNullsAsEmpty: NetOperatingIncome", @class = "text ui-widget-content ui-corner-all" })
                    </span>
                    <span class="third">
		                <label>$/SF</label>
                        <input type="text" name="netOperatingIncomePerSqFt" id="netOperatingIncomePerSqFt" data-bind = "valueWithNullsAsEmpty: NetOperatingIncomePerSqFt" readonly = "readonly" class="text ui-widget-content ui-corner-all readonly" />
                    </span>
                    <span class="third">
		                <label>$/Unit</label>
                        <input type="text" name="netOperatingIncomePerBuildingUnit" id="netOperatingIncomePerBuildingUnit" data-bind = "valueWithNullsAsEmpty: NetOperatingIncomePerBuildingUnit" readonly = "readonly" class="text ui-widget-content ui-corner-all readonly" />
                    </span>
                    <span class="left">
		                @Html.LabelFor(model => model.OverallRate) @Html.ValidationMessageFor(model => model.OverallRate)
                        @Html.TextBoxFor(model => model.OverallRate, new { data_bind = "valueWithNullsAsEmpty: OverallRate", @readonly = "readonly", @class = "text ui-widget-content ui-corner-all readonly" })
                    </span>
                    <span class="right">
		                @Html.LabelFor(model => model.GrossRentMultiplier) @Html.ValidationMessageFor(model => model.GrossRentMultiplier)
                        @Html.TextBoxFor(model => model.GrossRentMultiplier, new { data_bind = "valueWithNullsAsEmpty: GrossRentMultiplier", @class = "text ui-widget-content ui-corner-all" })
                    </span> 
                    </div>
                </div>
	        </fieldset>
        </li>
    </ul>
}
</script>
<script type="text/javascript">
    (function ($) {


        $(function () {

            function DisableButton(button) {
                if ($.isArray(button)) {
                    $.each(button, function (idx, item) {
                        $(".ui-dialog-buttonpane button:contains('" + item + "')").attr("disabled", true).addClass("ui-state-disabled");
                    });
                }
                if (Object.prototype.toString.call(button) == '[object String]') {
                    $(".ui-dialog-buttonpane button:contains('" + button + "')").attr("disabled", true).addClass("ui-state-disabled");
                }
            }

            function EnableButton(button) {
                if ($.isArray(button)) {
                    $.each(button, function (idx, item) {
                        $(".ui-dialog-buttonpane button:contains('" + item + "')").attr("disabled", false).removeClass("ui-state-disabled");
                    });
                }
                if (Object.prototype.toString.call(button) == '[object String]') {
                    $(".ui-dialog-buttonpane button:contains('" + button + "')").attr("disabled", false).removeClass("ui-state-disabled");
                }
            }

            $("#dialog").dialog("option", "buttons", {
                "Back": function () {
                    DisableButton('Back');
                    var options = {
                        success: function (actionRoute) {
                            window.TemplateDataService.getProperty(null, actionRoute.route);
                        },
                        url: $("#dialog-form").attr('action') + "?backButton=back"
                    };

                    $("#dialog-form").ajaxSubmit(options);
                },
                "Next": function () {
                    DisableButton('Next');
                    var options = {
                        success: function (actionRoute) {
                            window.TemplateDataService.getProperty(null, actionRoute.route);
                        },
                        url: $("#dialog-form").attr('action') + "?nextbutton=next"
                    };

                    $.validator.unobtrusive.parse($("#dialog-form"));
                    if ($("#dialog-form").valid()) {
                        $("#dialog-form").ajaxSubmit(options);
                    }
                    else {
                        EnableButton(['Back', 'Next', 'Cancel']);
                    }
                },
                Cancel: function () {
                    DisableButton('Cancel');
                    $(this).dialog("close");
                }
            });

            function formatToTwoDecimals(value) {
                return Math.round(value * 100) / 100;
            };

            function formatToOneDecimal(value) {
                return Math.round(value * 10) / 10;
            };

            window.dialogViewModel.loaded = function () {
                $('.date-pick').datepicker({
                    changeMonth: true,
                    changeYear: true,
                    showOtherMonths: true,
                    selectOtherMonths: true,
                    showAnim: "show"
                });
            };

            window.dialogViewModel.FloorToAreaRatio = ko.dependentObservable(function () {
                return (this.SiteTotalSquareFoot() == 0) ? "" : formatToTwoDecimals(this.BuildingTotalSquareFoot() / this.SiteTotalSquareFoot());
            }, window.dialogViewModel);

            window.dialogViewModel.AverageSquareFootPerUnit = ko.dependentObservable(function () {
                return (this.Units() == 0) ? "" : formatToTwoDecimals(this.BuildingTotalSquareFoot() / this.Units());
            }, window.dialogViewModel);

            window.dialogViewModel.CostPerBuildingSquareFoot = ko.dependentObservable(function () {
                return (this.BuildingTotalSquareFoot() == 0) ? "" : formatToTwoDecimals(this.Price() / this.BuildingTotalSquareFoot());
            }, window.dialogViewModel);

            window.dialogViewModel.CostPerUnit = ko.dependentObservable(function () {
                return (this.Units() == 0) ? "" : formatToTwoDecimals(this.Price() / this.Units());
            }, window.dialogViewModel);

            window.dialogViewModel.PotentialGrossIncomePerSqFt = ko.dependentObservable(function () {
                return (this.BuildingTotalSquareFoot() == 0) ? "" : formatToTwoDecimals(this.PotentialGrossIncome() / this.BuildingTotalSquareFoot());
            }, window.dialogViewModel);

            window.dialogViewModel.PotentialGrossIncomePerBuildingUnit = ko.dependentObservable(function () {
                return (this.Units() == 0) ? "" : formatToTwoDecimals(this.PotentialGrossIncome() / this.Units());
            }, window.dialogViewModel);

            window.dialogViewModel.EffectiveGrossIncomePerSqFt = ko.dependentObservable(function () {
                return (this.BuildingTotalSquareFoot() == 0) ? "" : formatToTwoDecimals(this.EffectiveGrossIncome() / this.BuildingTotalSquareFoot());
            }, window.dialogViewModel);

            window.dialogViewModel.EffectiveGrossIncomePerBuildingUnit = ko.dependentObservable(function () {
                return (this.Units() == 0) ? "" : formatToTwoDecimals(this.EffectiveGrossIncome() / this.Units());
            }, window.dialogViewModel);

            window.dialogViewModel.OperatingExpensePerSqFt = ko.dependentObservable(function () {
                return (this.BuildingTotalSquareFoot() == 0) ? "" : formatToTwoDecimals(this.OperatingExpense() / this.BuildingTotalSquareFoot());
            }, window.dialogViewModel);

            window.dialogViewModel.OperatingExpensePerBuildingUnit = ko.dependentObservable(function () {
                return (this.Units() == 0) ? "" : formatToTwoDecimals(this.OperatingExpense() / this.Units());
            }, window.dialogViewModel);

            window.dialogViewModel.NetOperatingIncome = ko.dependentObservable(function () {
                return formatToTwoDecimals(this.EffectiveGrossIncome() - this.OperatingExpense());
            }, window.dialogViewModel);

            window.dialogViewModel.NetOperatingIncomePerSqFt = ko.dependentObservable(function () {
                return (this.BuildingTotalSquareFoot() == 0) ? "" : formatToTwoDecimals(this.NetOperatingIncome() / this.BuildingTotalSquareFoot());
            }, window.dialogViewModel);

            window.dialogViewModel.NetOperatingIncomePerBuildingUnit = ko.dependentObservable(function () {
                return (this.Units() == 0) ? "" : formatToTwoDecimals(this.NetOperatingIncome() / this.Units());
            }, window.dialogViewModel);

            window.dialogViewModel.OverallRate = ko.dependentObservable(function () {
                return (this.CostPerBuildingSquareFoot() == 0) ? "" : formatToOneDecimal((this.NetOperatingIncome() / this.BuildingTotalSquareFoot()) / this.CostPerBuildingSquareFoot() * 100);
            }, window.dialogViewModel);
        });

    })(jQuery);
</script>
</div>